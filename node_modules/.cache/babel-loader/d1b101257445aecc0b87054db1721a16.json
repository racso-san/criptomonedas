{"ast":null,"code":"var _jsxFileName = \"/home/usuario/Documentos/GitKraken/criptomonedas/src/components/Formulario.js\";\nimport React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport Error from './Error';\nimport useMoneda from '../hooks/useMoneda';\nimport useCriptomonedas from '../hooks/useCriptomonedas';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nconst Boton = styled.input`\n    margin-top: 20px;\n    font-weight: bold;\n    font-size: 20px;\n    padding: 10px;\n    background-color: #66A2FE;\n    border: none;\n    width: 100%;\n    border-radius: 10px;\n    color: #FFF;\n    transition: background-color .3s ease;\n\n    &:hover {\n        background-color: #326AC0;\n        cursor: pointer;\n    }\n\n`;\n\nconst Formulario = ({\n  guardarMoneda,\n  guardarCriptomoneda\n}) => {\n  // State del listado de criptomonedas\n  const [listacripto, guardarCriptomonedas] = useState([]);\n  const [error, guardarError] = useState(false);\n  const MONEDAS = [{\n    codigo: 'ARG',\n    nombre: 'Peso Argentino'\n  }, {\n    codigo: 'USD',\n    nombre: 'Dolar de Estados Unidos'\n  }, {\n    codigo: 'MXN',\n    nombre: 'Peso Mexicano'\n  }, {\n    codigo: 'EUR',\n    nombre: 'Euro'\n  }, {\n    codigo: 'GBP',\n    nombre: 'Libra Esterlina'\n  }]; // Utilizar useMoneda\n\n  const [moneda, SelectMonedas] = useMoneda('Elige tu Moneda', '', MONEDAS); // Utilizar criptomonedas\n\n  const [criptomoneda, SelectCripto] = useCriptomonedas('Elige tu Criptomonedas', '', listacripto); // Ejecutar llamdo a la API\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n      const resultado = await axios.get(url);\n      guardarCriptomonedas(resultado.data.Data);\n    };\n\n    consultarAPI();\n  }, []);\n\n  const cotizarMoneda = e => {\n    e.preventDefault(); // Validar\n\n    if (moneda === '' || criptomoneda === '') {\n      guardarError(true);\n      return;\n    }\n\n    ;\n    guardarError(false);\n    guardarMoneda(moneda);\n    guardarCriptomoneda(criptomoneda);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: cotizarMoneda,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, error ? /*#__PURE__*/React.createElement(Error, {\n    mensaje: \"Todos los campos son obligatorios\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 22\n    }\n  }) : null, /*#__PURE__*/React.createElement(SelectMonedas, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SelectCripto, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Boton, {\n    type: \"submit\",\n    value: \"Calcular\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }));\n};\n\nFormulario.propType = {\n  guardarMoneda: PropTypes.object.isRequired,\n  guardarCriptomoneda: PropTypes.object.isRequired\n};\nexport default Formulario;","map":{"version":3,"sources":["/home/usuario/Documentos/GitKraken/criptomonedas/src/components/Formulario.js"],"names":["React","useEffect","useState","styled","Error","useMoneda","useCriptomonedas","axios","PropTypes","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarCriptomonedas","error","guardarError","MONEDAS","codigo","nombre","moneda","SelectMonedas","criptomoneda","SelectCripto","consultarAPI","url","resultado","get","data","Data","cotizarMoneda","e","preventDefault","propType","object","isRequired"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport styled from '@emotion/styled';\nimport Error from './Error';\nimport useMoneda from '../hooks/useMoneda';\nimport useCriptomonedas from '../hooks/useCriptomonedas';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\n\nconst Boton = styled.input`\n    margin-top: 20px;\n    font-weight: bold;\n    font-size: 20px;\n    padding: 10px;\n    background-color: #66A2FE;\n    border: none;\n    width: 100%;\n    border-radius: 10px;\n    color: #FFF;\n    transition: background-color .3s ease;\n\n    &:hover {\n        background-color: #326AC0;\n        cursor: pointer;\n    }\n\n`;\n\nconst Formulario = ({guardarMoneda,guardarCriptomoneda}) => {\n\n    // State del listado de criptomonedas\n    const [listacripto,guardarCriptomonedas] = useState([]);\n    const [error,guardarError] = useState(false);\n\n    const MONEDAS = [\n        {codigo: 'ARG', nombre: 'Peso Argentino'},\n        {codigo: 'USD', nombre: 'Dolar de Estados Unidos'},\n        {codigo: 'MXN', nombre: 'Peso Mexicano'},\n        {codigo: 'EUR', nombre: 'Euro'},\n        {codigo: 'GBP', nombre: 'Libra Esterlina'}\n    ];\n\n    // Utilizar useMoneda\n    const [moneda,SelectMonedas] = useMoneda('Elige tu Moneda', '' , MONEDAS);\n\n    // Utilizar criptomonedas\n    const [criptomoneda,SelectCripto] = useCriptomonedas('Elige tu Criptomonedas','',listacripto);\n\n    // Ejecutar llamdo a la API\n    useEffect(() => {\n        const consultarAPI = async () => {\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n            const resultado = await axios.get(url);\n                \n            guardarCriptomonedas(resultado.data.Data);\n        }\n        consultarAPI();\n    },[]);\n\n    const cotizarMoneda = (e) => {\n        e.preventDefault();\n\n        // Validar\n        if(moneda==='' || criptomoneda===''){\n            guardarError(true);\n            return;\n        };\n\n        guardarError(false);\n        guardarMoneda(moneda);\n        guardarCriptomoneda(criptomoneda);\n    };\n\n    return ( \n\n        <form\n            onSubmit={cotizarMoneda}\n        >\n            {error ? <Error mensaje=\"Todos los campos son obligatorios\" /> : null}\n            <SelectMonedas/>\n            <SelectCripto/>\n\n            <Boton\n                type=\"submit\"\n                value=\"Calcular\"\n            />\n        </form>\n\n     );\n}\n\nFormulario.propType = { \n    guardarMoneda: PropTypes.object.isRequired,\n    guardarCriptomoneda: PropTypes.object.isRequired\n};\n\nexport default Formulario;\n"]},"metadata":{},"sourceType":"module"}