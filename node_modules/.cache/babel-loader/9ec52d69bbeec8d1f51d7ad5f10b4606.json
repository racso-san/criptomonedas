{"ast":null,"code":"var _jsxFileName = \"/home/usuario/Documentos/GitKraken/criptomonedas/src/hooks/useCriptomonedas.js\";\nimport React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`;\nconst Select = styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n\n`;\n\nconst useCriptomonedas = (label, stateInicial, opciones) => {\n  // State de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  const SelectCripto = () => /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, label), /*#__PURE__*/React.createElement(Select, {\n    onChange: e => actualizarState(e.target.value),\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"--Seleccione una opcion--\"), opciones.map(opcion => /*#__PURE__*/React.createElement(\"option\", {\n    key: opcion.CoinInfo.Id,\n    value: opcion.CoinInfo.Name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, opcion.CoinInfo.FullName)))); // Retornar state, interfaz y func que modifica el state\n\n\n  return [state, SelectCripto, actualizarState];\n};\n\nexport default useCriptomonedas;","map":{"version":3,"sources":["/home/usuario/Documentos/GitKraken/criptomonedas/src/hooks/useCriptomonedas.js"],"names":["React","Fragment","useState","styled","Label","label","Select","select","useCriptomonedas","stateInicial","opciones","state","actualizarState","SelectCripto","e","target","value","map","opcion","CoinInfo","Id","Name","FullName"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,QAAvB,QAAsC,OAAtC;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,MAAMC,KAAK,GAAGD,MAAM,CAACE,KAAM;;;;;;;;CAA3B;AAUA,MAAMC,MAAM,GAAGH,MAAM,CAACI,MAAO;;;;;;;;;CAA7B;;AAWA,MAAMC,gBAAgB,GAAG,CAACH,KAAD,EAAOI,YAAP,EAAoBC,QAApB,KAAiC;AAEtD;AACA,QAAM,CAACC,KAAD,EAAOC,eAAP,IAA0BV,QAAQ,CAACO,YAAD,CAAxC;;AAEA,QAAMI,YAAY,GAAG,mBACjB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQR,KAAR,CADJ,eAEI,oBAAC,MAAD;AACI,IAAA,QAAQ,EAAGS,CAAC,IAAIF,eAAe,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CADnC;AAEI,IAAA,KAAK,EAAEL,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAJJ,EAKKD,QAAQ,CAACO,GAAT,CAAaC,MAAM,iBAChB;AAAQ,IAAA,GAAG,EAAEA,MAAM,CAACC,QAAP,CAAgBC,EAA7B;AAAiC,IAAA,KAAK,EAAEF,MAAM,CAACC,QAAP,CAAgBE,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+DH,MAAM,CAACC,QAAP,CAAgBG,QAA/E,CADH,CALL,CAFJ,CADJ,CALsD,CAqBtD;;;AACA,SAAO,CAACX,KAAD,EAAOE,YAAP,EAAoBD,eAApB,CAAP;AACH,CAvBD;;AAyBA,eAAeJ,gBAAf","sourcesContent":["import React,{Fragment,useState} from 'react';\n\nimport styled from '@emotion/styled';\n\n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`;\n\nconst Select = styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n\n`;\n\nconst useCriptomonedas = (label,stateInicial,opciones) => {\n\n    // State de nuestro custom hook\n    const [state,actualizarState] = useState(stateInicial);\n\n    const SelectCripto = () => (\n        <Fragment>\n            <Label>{label}</Label>\n            <Select\n                onChange={ e => actualizarState(e.target.value)}\n                value={state}\n            >\n                <option value=\"\">--Seleccione una opcion--</option>\n                {opciones.map(opcion => (\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}\n                    </option> \n                ))}\n            </Select>\n        </Fragment>\n    );\n\n    // Retornar state, interfaz y func que modifica el state\n    return [state,SelectCripto,actualizarState];\n}   \n \nexport default useCriptomonedas;"]},"metadata":{},"sourceType":"module"}